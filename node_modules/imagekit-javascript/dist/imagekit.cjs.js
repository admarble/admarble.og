'use strict';

var supportedTransforms = {
    "height" : "h",
    "width" : "w",
    "aspectRatio" : "ar",
    "quality" : "q",
    "crop" : "c",
    "cropMode" : "cm",
    "x" : "x",
    "y" : "y",
    "focus" : "fo",
    "format" : "f",
    "radius" : "r",
    "background" : "bg",
    "border" : "bo",
    "rotation" : "rt",
    "blur" : "bl",
    "named" : "n",
    "overlayImage" : "oi",
    "overlayX" : "ox",
    "overlayY" : "oy",
    "overlayFocus" : "ofo",
    "overlayHeight" : "oh",
    "overlayWidth" : "ow",
    "overlayText" : "ot",
    "overlayTextFontSize" : "ots",
    "overlayTextFontFamily" : "otf",
    "overlayTextColor" : "otc",
    "overlayAlpha" : "oa",
    "overlayTextTypography" : "ott",
    "overlayBackground" : "obg",
    "overlayImageTrim" : "oit",
    "progressive" : "pr",
    "lossless" : "lo",
    "trim" : "t",
    "metadata" : "md",
    "colorProfile" : "cp",
    "defaultImage" : "di",
    "dpr" : "dpr",
    "effectSharpen" : "e-sharpen",
    "effectUSM" : "e-usm",
    "effectContrast" : "e-contrast",
    "effectGray" : "e-grayscale",
    "original" : "orig"
};

const DEFAULT_TRANSFORMATION_POSITION = "path";
const QUERY_TRANSFORMATION_POSITION = "query";
const VALID_TRANSFORMATION_POSITIONS = [DEFAULT_TRANSFORMATION_POSITION, QUERY_TRANSFORMATION_POSITION];
const CHAIN_TRANSFORM_DELIMITER = ":";
const TRANSFORM_DELIMITER = ",";
const TRANSFORM_KEY_VALUE_DELIMITER = "-";

var transformationUtils = {
    getDefault: function () {
        return DEFAULT_TRANSFORMATION_POSITION;
    },
    addAsQueryParameter: function (options) {
        return options.transformationPosition === QUERY_TRANSFORMATION_POSITION;
    },
    validParameters: function (options) {
        return VALID_TRANSFORMATION_POSITIONS.indexOf(options.transformationPosition) != -1;
    },
    getSupportedTransforms: function () {
        return supportedTransforms;
    },
    getTransformKey: function (transform) {
        if (!transform) { return ""; }

        return supportedTransforms[transform.toLowerCase()] || "";
    },
    getChainTransformDelimiter: function () {
        return CHAIN_TRANSFORM_DELIMITER;
    },
    getTransformDelimiter: function () {
        return TRANSFORM_DELIMITER;
    },
    getTransformKeyValueDelimiter: function () {
        return TRANSFORM_KEY_VALUE_DELIMITER;
    }
};

const TRANSFORMATION_PARAMETER = "tr";

const buildURL = (opts) => {
    if (!opts.path && !opts.src) {
        return "";
    }

    var urlObj, isSrcParameterUsedForURL, urlEndpointPattern;
    if (opts.path) {
        urlEndpointPattern = new URL(opts.urlEndpoint).pathname;
        urlObj = new URL(pathJoin([opts.urlEndpoint.replace(urlEndpointPattern,""),opts.path]));
    } else {
        urlObj = new URL(opts.src);
        isSrcParameterUsedForURL = true;
    }

    if (!urlObj) return "";

    if (opts.sdkVersion && opts.sdkVersion.trim() != "") {
        urlObj.searchParams.append("ik-sdk-version", opts.sdkVersion.trim());
    }
    for (var i in opts.queryParameters) {
        urlObj.searchParams.append(i, opts.queryParameters[i]);
    }

    var transformationString = constructTransformationString(opts.transformation);

    if (transformationUtils.addAsQueryParameter(opts) || isSrcParameterUsedForURL) {
        urlObj.searchParams.append(TRANSFORMATION_PARAMETER, transformationString);
    } else {
        urlObj.pathname = pathJoin([
            TRANSFORMATION_PARAMETER + transformationUtils.getChainTransformDelimiter() + transformationString,
            urlObj.pathname
        ]);
    }

    urlObj.pathname = pathJoin([urlEndpointPattern,urlObj.pathname]);

    return urlObj.href;
};

function constructTransformationString(transformation) {
    if (!Array.isArray(transformation)) { return ""; }

    var parsedTransforms = [];
    for (var i = 0, l = transformation.length; i < l; i++) {
        var parsedTransformStep = [];
        for (var key in transformation[i]) {
            var transformKey = transformationUtils.getTransformKey(key);
            if (!transformKey) {
                transformKey = key;
            }

            if (transformation[i][key] === "-") {
                parsedTransformStep.push(transformKey);
            } else {
                parsedTransformStep.push([transformKey, transformation[i][key]].join(transformationUtils.getTransformKeyValueDelimiter()));
            }

        }
        parsedTransforms.push(parsedTransformStep.join(transformationUtils.getTransformDelimiter()));
    }

    return parsedTransforms.join(transformationUtils.getChainTransformDelimiter());
}

function pathJoin(parts, sep) {
    var separator = sep || '/';
    var replace = new RegExp(separator + '{1,}', 'g');
    return parts.join(separator).replace(replace, separator);
}

/*
    URL builder
*/

const url = (urlOpts, defaultOptions) => {
    var opts = {
        ...defaultOptions,
        ...urlOpts
    };

    if (!validOptions(opts)) {
        return "";
    }

    return buildURL(opts);
};

function validOptions(opts) {
    if (!opts.urlEndpoint) return false;

    if (!transformationUtils.validParameters(opts)) return false;

    return true;
}

var errorMessages = {
    "MANDATORY_INITIALIZATION_MISSING" : { message : "Missing publicKey or privateKey or urlEndpoint during ImageKit initialization", help : "" },
    "INVALID_TRANSFORMATION_POSITION" : { message : "Invalid transformationPosition parameter", help : "" },
    "PRIVATE_KEY_CLIENT_SIDE" : { message : "privateKey should not be passed on the client side", help : "" },
    "MISSING_UPLOAD_DATA" : { message : "Missing data for upload", help : "" },
    "MISSING_UPLOAD_FILE_PARAMETER" : { message : "Missing file parameter for upload", help : "" },
    "MISSING_UPLOAD_FILENAME_PARAMETER" : { message : "Missing fileName parameter for upload", help : "" },
    "MISSING_AUTHENTICATION_ENDPOINT" : { message : "Missing authentication endpoint for upload", help : "" }
};

function respond(isError, response, callback) {
    if(typeof callback == "function") { 
        if(isError) {
            callback(response, null);
        } else {
            callback(null, response);
        }
    }    
}

const request = (formData, defaultOptions, callback) => {
    generateSignatureToken(defaultOptions, function (err, signaturObj) {
        if (err) {
            if (typeof callback != "function") return;
            callback(err);
            return;
        } else {
            formData.append("signature", signaturObj.signature || "");
            formData.append("expire", signaturObj.expire || 0);
            formData.append("token", signaturObj.token);

            uploadFile(formData, function (err, responseSucessText) {
                if (err) {
                    if (typeof callback != "function") return;
                    callback(err, null);
                } else {
                    callback(null, responseSucessText);
                }
            });
        }
    });
};

const generateSignatureToken = (defaultOptions, callback) => {
    var xhr = new XMLHttpRequest();
    xhr.timeout = 60000;
    xhr.open('GET', defaultOptions.authenticationEndpoint);
    xhr.ontimeout = function (e) {
        if (typeof callback != "function") return;
        callback("The authenticationEndpoint you provided timed out in 60 seconds");
    };
    xhr.onload = function () {
        if (xhr.status === 200) {
            try {
                var body = JSON.parse(xhr.responseText);
                var obj = {
                    signature: body.signature,
                    expire: body.expire,
                    token: body.token
                };
                callback(null, obj);
                return;
            } catch (ex) {
                if (typeof callback != "function") return;
                callback(ex);
            }
        } else {
            try {
                var error = JSON.parse(xhr.responseText);
                if (typeof callback != "function") return;
                callback(error);
            } catch (ex) {
                if (typeof callback != "function") return;
                callback(ex);
            }
        }
    };
    xhr.send();
    return;
};

const uploadFile = (formData, callback) => {
    var uploadFileXHR = new XMLHttpRequest();
    uploadFileXHR.open('POST', 'https://upload.imagekit.io/api/v1/files/upload');
    uploadFileXHR.onload = function () {
        if (uploadFileXHR.status === 200) {
            if (typeof callback != "function") return;
            var uploadResponse = JSON.parse(uploadFileXHR.responseText);
            callback(null, uploadResponse);
        }
        else if (uploadFileXHR.status !== 200) {
            if (typeof callback != "function") return;
            callback(JSON.parse(uploadFileXHR.responseText));
        }
    };
    uploadFileXHR.send(formData);
    return
};

const upload = (uploadOptions, defaultOptions, callback) => {
    if (!uploadOptions) {
        respond(true, errorMessages.INVALID_UPLOAD_OPTIONS, callback);
        return;
    }

    if (!uploadOptions.file) {
        respond(true, errorMessages.MISSING_UPLOAD_FILE_PARAMETER, callback);
        return;
    }

    if (!uploadOptions.fileName) {
        respond(true, errorMessages.MISSING_UPLOAD_FILENAME_PARAMETER, callback);
        return;
    }

    if (!defaultOptions.authenticationEndpoint) {
        respond(true, errorMessages.MISSING_AUTHENTICATION_ENDPOINT, callback);
        return;
    }

    var formData = new FormData();
    for (var i in uploadOptions) {
        formData.append(i, uploadOptions[i]);
    }
    formData.append("publicKey", defaultOptions.publicKey);

    request(formData, defaultOptions, callback);
};

var name = "@imagekit/imagekit-javascript";
var version = "1.3.0";
var description = "Javascript SDK for using ImageKit.io in the browser";
var main = "dist/imagekit.cjs.js";
var module$1 = "dist/imagekit.esm.js";
var browser = "dist/imagekit.min.js";
var unpkg = "dist/imagekit.min.js";
var dependencies = {
	"@imagekit/imagekit-javascript": "^1.3.0"
};
var files = [
	"dist",
	"src"
];
var devDependencies = {
	"@babel/cli": "^7.10.5",
	"@babel/core": "^7.10.5",
	"@babel/preset-env": "^7.10.4",
	"@rollup/plugin-babel": "^5.2.0",
	"@rollup/plugin-commonjs": "^14.0.0",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^8.4.0",
	chai: "^4.2.0",
	"formdata-node": "2.1.0",
	mocha: "^7.0.1",
	rollup: "^2.22.0",
	"rollup-plugin-terser": "^6.1.0",
	sinon: "^8.1.1"
};
var scripts = {
	dev: "rollup -c -w",
	build: "rm -rf dist*;rollup -c",
	test: "export NODE_ENV=test && ./node_modules/mocha/bin/mocha --exit -t 40000 test/*.js;ex=$? ; unset NODE_ENV ; exit $ex;",
	startSampleApp: "yarn build && cd samples/sample-app/ && yarn install && node index.js"
};
var repository = {
	type: "git",
	url: "git+https://github.com/imagekit-developer/imagekit-javascript.git"
};
var keywords = [
	"imagekit",
	"javascript",
	"sdk",
	"js",
	"sdk",
	"image",
	"optimization",
	"image",
	"transformation",
	"image",
	"resize"
];
var author = "ImageKit Developer";
var license = "MIT";
var bugs = {
	url: "https://github.com/imagekit-developer/imagekit-javascript/issues"
};
var homepage = "https://github.com/imagekit-developer/imagekit-javascript#readme";
var pkg = {
	name: name,
	version: version,
	description: description,
	main: main,
	module: module$1,
	browser: browser,
	unpkg: unpkg,
	dependencies: dependencies,
	files: files,
	devDependencies: devDependencies,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage
};

const ImageKit = function(opts) {
    opts = opts || {};
    this.options = {
        sdkVersion: `javascript-${pkg.version}`,
        publicKey: "",
        urlEndpoint: "",
        transformationPosition: transformationUtils.getDefault()
    };

    this.options = {
        ...this.options,
        ...opts
    };

    if (!mandatoryParametersAvailable(this.options)) {
        throw new Error(errorMessages.MANDATORY_INITIALIZATION_MISSING);
    }

    if (privateKeyPassed(this.options)) {
        throw new Error(errorMessages.PRIVATE_KEY_CLIENT_SIDE);
    }

    if (!transformationUtils.validParameters(this.options)) {
        throw new Error(errorMessages.INVALID_TRANSFORMATION_POSITION);
    }

    /*
        URL Builder
    */
    this.url = function (urlOptions) {
        return url(urlOptions, this.options);
    };

    /*
        Upload API
    */
    this.upload = function (uploadOptions, callback) {
        return upload(uploadOptions, this.options, callback);
    };
};

function mandatoryParametersAvailable(options) {
    return options.publicKey && options.urlEndpoint;
}

function privateKeyPassed(options) {
    return typeof options.privateKey != "undefined";
}

module.exports = ImageKit;
